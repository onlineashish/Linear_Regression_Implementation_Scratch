# -*- coding: utf-8 -*-
"""Q1_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qS8-5c3lwMfeY1LGlMIEVk-f-5K2bDZC
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from linearRegression.linear_regression import LinearRegression
from metrics import *
import time

np.random.seed(45)

N = 30
P = 5
X = pd.DataFrame(np.random.randn(N, P))
y = pd.Series(np.random.randn(N))
# X = pd.DataFrame([[1, 2, 3], [2, 4 ,6], [3, 6, 9]])
# y = pd.Series([1, 2, 3])
print(X.shape)


#Evaluating sklearn's implementation of linear regression
LR = LinearRegression(fit_intercept=True)
begin = time.time()
LR.fit_sklearn_LR(X,y)
end = time.time()
y_hat = LR.predict(X)

print('For sklearn LinearRegression : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print('Time taken for sklearns implementation',(end-begin))
print("---------------------------")


#Evaluating solution of linear regression using normal equations
LR = LinearRegression(fit_intercept=True)
begin = time.time()
LR.fit_normal_equations(X,y)
end = time.time()
y_hat = LR.predict(X)

print('For linear regression using normal equations : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print('Time taken for normal equations implementation',(end-begin))
print("---------------------------")



#Evaluating solution of linear regression using SVD
LR = LinearRegression(fit_intercept=True)
begin = time.time()
LR.fit_SVD(X,y)
end = time.time()
y_hat = LR.predict(X)

print('For linear regression using SVD : \n')
print('RMSE: ', rmse(y_hat, y))
print('MAE: ', mae(y_hat, y))
print('Time taken for SVD implementation',(end-begin))
print("---------------------------")