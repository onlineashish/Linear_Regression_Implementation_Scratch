# -*- coding: utf-8 -*-
"""Q7_forecast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QygJyzTuf4wJ3ioxCqF0boFIbPNbBJd6
"""

import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import os.path
from os import path

#TODO : Write here

if not path.exists('Plots/Question7/'):
  os.makedirs('Plots/Question7/')


#Loading the dataset
df = pd.read_csv("https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-min-temperatures.csv", header=0)

# Convert date column to datetime format
df["Date"] = pd.to_datetime(df["Date"])


lags = 50
temp_shifted = pd.concat([df['Temp'].shift(i) for i in range(1, lags + 1)], axis=1)
temp_shifted.columns = ['lag_{}'.format(i) for i in range(1, lags + 1)]
df = pd.concat([df['Date'].iloc[lags:], df['Temp'].iloc[lags:], temp_shifted], axis=1)

# remove missing values
df = df.dropna()

# sort dataframe by date
df = df.sort_values('Date')

# calculate number of days in the dataset
num_days = (df['Date'].max() - df['Date'].min()).days

# split data into training and testing sets
train_days = int(num_days * 0.8)
test_days = num_days - train_days

train_data = df.head(train_days)
test_data = df.tail(test_days)



# create autoregressive model
X_train = train_data.iloc[:, 2:]
y_train = train_data['Temp']

autoreg_model = LinearRegression()
autoreg_model.fit(X_train, y_train)

# evaluate autoregressive model
X_test = test_data.iloc[:, 2:]
y_test = test_data['Temp']

y_pred = autoreg_model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mae = np.mean(np.abs(y_test - y_pred))
print("MSE: ", mse)
print("RMSE: ", rmse)
print("MAE: ", mae)

plt.plot(X_test.index, y_test, label="True values")
plt.plot(X_test.index, y_pred, label="Predictions")
plt.xlabel("Time step")
plt.ylabel("Temperature")
plt.legend()
plt.savefig("Plots/Question7/fig.png")
plt.close()